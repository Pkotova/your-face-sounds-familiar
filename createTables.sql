--SEASONS(SEASON_ID, TV_CHANEL,YEAR,EPISODES,START_DATE,FINAL_DATE,AWARD,WINNER_ID)
CREATE TABLE SEASONS
(
    SEASON_ID  INT         NOT NULL GENERATED ALWAYS AS IDENTITY (START WITH 1, INCREMENT BY 1),
    TV_CHANEL  VARCHAR(30) NOT NULL,
    YEAR       INT         NOT NULL,
    EPISODES   INT         NOT NULL,
    START_DATE DATE        NOT NULL,
    FINAL_DATE DATE        NOT NULL,
    AWARD      VARCHAR(32) NOT NULL,
    WINNER_ID  INT         NOT NULL,

    CONSTRAINT PK_SEASON_ID PRIMARY KEY (SEASON_ID),

    FOREIGN KEY (WINNER_ID)
        REFERENCES PARTICIPANTS (PARTICIPANT_ID),

    CHECK (YEAR >= 2013),
    CHECK ( EPISODES >= 12 ),
    CHECK ( FINAL_DATE > START_DATE )
);
-- WEAK ENTITY, IT'S ONE SEASON HAS MANY EPISODES

CREATE TABLE EPISODES
(
    EPISODE_ID INT NOT NULL ,
    SEASON_ID  INT NOT NULL REFERENCES SEASONS (SEASON_ID),
-- PRIMARY KEY OF EPISODE IS EPISODE_ID & SEASON_ID
-- BECAUSE FIRST EPISODE OF FIRST SEASON
-- IS DIFFERENT FROM FIRST EPISODE SECOND SEASON
    CONSTRAINT PK_EP_S_ID PRIMARY KEY (EPISODE_ID, SEASON_ID)
);
-- PEOPLE(PERSON_ID,NAME,NICKNAME,GENDER,AGE,JOB)
CREATE TABLE PEOPLE
(
    PERSON_ID INT         NOT NULL GENERATED ALWAYS AS IDENTITY (START WITH 1, INCREMENT BY 1),
    NAME      VARCHAR(64) NOT NULL,
    NICKNAME  VARCHAR(32),
    GENDER    CHAR(3),
    AGE       INT,
    JOB       VARCHAR(32),

-- PRIMARY KEY IS PERSON_ID
    CONSTRAINT PK_PEOPLE_ID PRIMARY KEY (PERSON_ID),

-- CHECKS OF GENDER AND AGES
    CHECK (GENDER IN ('M', 'F')),
    CHECK (AGE > 18)
);
---------------- REPRESENTING IS-A HIERARCHY ---------------------
--STAFF(STAFF_ID, POSITION)
CREATE TABLE STAFF
(
    STAFF_ID INT         NOT NULL REFERENCES PEOPLE (PERSON_ID),
    POSITION VARCHAR(32) NOT NULL,
-- PRIMARY KEY IS STAFF_ID, WHICH REFERENCES TO PEOPLE
    PRIMARY KEY (STAFF_ID),
-- FOREIGN KEY IS STAFF_ID
    FOREIGN KEY (STAFF_ID)
        REFERENCES PEOPLE (PERSON_ID)
        ON DELETE CASCADE
        ON UPDATE RESTRICT
);
--HOST(HOST_ID)
CREATE TABLE HOSTS
(
    HOST_ID INT NOT NULL REFERENCES PEOPLE (PERSON_ID),

-- PRIMARY KEY IS HOST_ID, WHICH REFERENCES TO PEOPLE
    PRIMARY KEY (HOST_ID),
    FOREIGN KEY (HOST_ID)
        REFERENCES PEOPLE (PERSON_ID)
        ON DELETE CASCADE
        ON UPDATE RESTRICT
);
--JUDGE(JUDGE_ID)
CREATE TABLE JUDGES
(
    JUDGE_ID INT NOT NULL REFERENCES PEOPLE (PERSON_ID),

-- PRIMARY KEY IS JUDGE_ID, WHICH REFERENCES TO PEOPLE
    PRIMARY KEY (JUDGE_ID),
    FOREIGN KEY (JUDGE_ID)
        REFERENCES PEOPLE (PERSON_ID)
        ON DELETE CASCADE
        ON UPDATE RESTRICT
);
-- PARTICIPANT(PARTICIPANT_ID,SUM_POINTS)
CREATE TABLE PARTICIPANTS
(
    PARTICIPANT_ID INT NOT NULL REFERENCES PEOPLE (PERSON_ID),
    SUM_POINTS     INT,

-- PRIMARY KEY IS PARTICIPANT_ID, WHICH REFERENCES TO PEOPLE
    PRIMARY KEY (PARTICIPANT_ID),
    FOREIGN KEY (PARTICIPANT_ID)
        REFERENCES PEOPLE (PERSON_ID)
        ON DELETE CASCADE
        ON UPDATE RESTRICT,
-- THE SUM OF ALL POINTS CAN NOT BE LESS THAN 0
    CHECK (SUM_POINTS > 0)
);

-- PARTICIPATE_IN(PERSON_ID,SEASON_ID)
CREATE TABLE PARTICIPATE_IN
(
    PERSON_ID INT NOT NULL,
    SEASON_ID INT NOT NULL,

-- THERE ARE TWO FOREIGN KEYS
    FOREIGN KEY (PERSON_ID)
        REFERENCES PEOPLE (PERSON_ID),
    FOREIGN KEY (SEASON_ID)
        REFERENCES SEASONS (SEASON_ID)
);

-- GENERATE_IMPRESSION(SINGER_NAME,SONG_NAME,PARTICIPATE_ID,EPISODE_ID,SEASON_ID)
CREATE TABLE GENERATED_IMPRESSION
(
    SINGER_NAME    VARCHAR(64) NOT NULL,
    SONS_NAME      VARCHAR(64) NOT NULL,

    PARTICIPANT_ID INT         NOT NULL,
    EPISODE_ID     INT         NOT NULL,
    SEASON_ID      INT         NOT NULL,

--THERE ARE TWO FOREIGN KEYS
    FOREIGN KEY (PARTICIPANT_ID)
        REFERENCES PARTICIPANTS (PARTICIPANT_ID),

    FOREIGN KEY (EPISODE_ID, SEASON_ID)
        REFERENCES EPISODES (EPISODE_ID, SEASON_ID)
);
-- IS_RATED_IN(PARTICIPANT_IN,EPISODE_ID,SEASON_ID,POINTS)
CREATE TABLE RATED_IN
(
    PARTICIPANT_ID INT NOT NULL,
    EPISODE_ID     INT NOT NULL,
    SEASON_ID      INT NOT NULL,
    POINTS         INT NOT NULL,

-- THERE ARE TWO FOREIGN KEYS
    FOREIGN KEY (PARTICIPANT_ID)
        REFERENCES PARTICIPANTS (PARTICIPANT_ID),

    FOREIGN KEY (EPISODE_ID, SEASON_ID)
        REFERENCES EPISODES (EPISODE_ID, SEASON_ID),

-- A PARTICIPANT CANT HAVE LESS THAN 3 AND MORE THAN 11
    CHECK (POINTS >= 3 AND POINTS <= 11)
);

