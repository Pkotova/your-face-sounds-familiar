-- Scalar function for Participant - returns the name of the participant by ID
SET SCHEMA FN71866;

-- before trigger
CREATE TRIGGER TRG_PEOPLE_NK
BEFORE INSERT ON PEOPLE
REFERENCING NEW AS n
FOR EACH ROW
MODE DB2SQL
WHEN (n.NICKNAME IS NULL )
 SET n.NICKNAME = n.NAME;

INSERT INTO PEOPLE(NAME, NICKNAME, GENDER, AGE, JOB) VALUES('Kiril Kirov', null ,'M',43, 'director');
-----------------------------------------------------
--after trigger
CREATE TABLE AUDIT(CTIME TIMESTAMP, TEXT VARCHAR(200));

CREATE TRIGGER TRG_SEASON_WINNER
AFTER UPDATE OF AGE ON PEOPLE
REFERENCING OLD AS o NEW AS n
FOR EACH ROW
MODE DB2SQL
WHEN (o.AGE != n.AGE)
     BEGIN
      DECLARE V_TEXT VARCHAR(200);
      SET V_TEXT = USER || ' PERSON ID = ' || o.AGE
                        || ' OLD AGE = ' || CHAR(o.AGE)
                        || 'NEW AGE = ' || CHAR(n.AGE);
      INSERT INTO AUDIT VALUES(CURRENT_TIMESTAMP, V_TEXT);
    END;


UPDATE PEOPLE
    SET AGE = AGE + 1
    WHERE PERSON_ID > 1 AND PERSON_ID < 121;
-----------------------------------------------------	
	
--before trigger
CREATE TRIGGER TRG_STAFF_POSITION
BEFORE INSERT ON STAFF
REFERENCING NEW AS n
FOR EACH ROW
MODE DB2SQL
WHEN (n.POSITION IS NULL )
 SET n.POSITION = 'STAFF';

INSERT INTO STAFF(STAFF_ID, POSITION)
VALUES(9, null);

---------------------------------------------------

CREATE TRIGGER TRG_EPISODES_SEASONID
BEFORE INSERT ON EPISODES
REFERENCING NEW AS n
FOR EACH ROW
MODE DB2SQL
    WHEN(n.SEASON_ID IS NULL)
    SET n.SEASON_ID = 10;

----------------------------------
-- TRIGGER BEFORE
CREATE TRIGGER TRG_PEOPLE_AGE
BEFORE INSERT ON PEOPLE
REFERENCING NEW AS n
FOR EACH ROW
MODE DB2SQL
    WHEN(n.AGE IS NULL)
    SET n.AGE = 30;

INSERT INTO PEOPLE(NAME, NICKNAME, AGE)
VALUES ('PENKA', NULL, NULL);

CREATE TABLE AUDIT (CTIME TIMESTAMP, TEXT VARCHAR(200));
-----------------------------------------------
-- TRIGGER AFTER
CREATE TRIGGER TRG_PARTICIPANT_SUMPOINTS
AFTER UPDATE OF SUM_POINTS ON PARTICIPANTS
REFERENCING OLD AS o NEW AS n
FOR EACH ROW
MODE DB2SQL
WHEN(o.SUM_POINTS = n.SUM_POINTS)
    BEGIN
    DECLARE V_TEXT VARCHAR(128);
    SET V_TEXT = USER || ' OLD SUM_POINTS = ' ||
                   CHAR(o.SUM_POINTS) || ' NEW SUM_POINTS = ' ||
                   CHAR(n.SUM_POINTS);
    INSERT INTO AUDIT VALUES(CURRENT_TIMESTAMP, V_TEXT);
    END;


UPDATE PARTICIPANTS
    SET SUM_POINTS = SUM_POINTS + 5
    WHERE SUM_POINTS < 50;
---------------------------------------------------------------------	
-- before trigger
CREATE TRIGGER TRG_PEOPLE_JOB
BEFORE INSERT ON PEOPLE
REFERENCING NEW AS n
FOR EACH ROW
MODE DB2SQL
WHEN (n.JOB IS NULL )
 SET n.JOB = 'staff';
--
INSERT INTO PEOPLE(NAME, NICKNAME, JOB, AGE) VALUES('Petya', null, null, 52);
----------------------------------------------------------------------
--after trigger
CREATE TABLE AUDIT1(CTIME TIMESTAMP, TEXT VARCHAR(200));

CREATE TRIGGER TRG_CHANGE_NICKNAME
AFTER UPDATE OF NICKNAME ON PEOPLE
REFERENCING OLD AS o NEW AS n
FOR EACH ROW
MODE DB2SQL
WHEN (o.NICKNAME != n.NICKNAME)
     BEGIN
      DECLARE V_TEXT VARCHAR(200);
      SET V_TEXT = USER || ' OLD NICKNAME = ' || o.NICKNAME
                        || 'NEW NICKNAME = ' || n.NICKNAME;
      INSERT INTO AUDIT1 VALUES(CURRENT_TIMESTAMP, V_TEXT);
    END;
--
UPDATE PEOPLE
    SET NICKNAME = 'The dude'
    WHERE PERSON_ID = 10;
----------------------------------------------------------
CREATE TABLE AUDIT2(CTIME TIMESTAMP, TEXT VARCHAR(200));

CREATE TRIGGER TRG_CHANGE_PEOPLE_JOB
AFTER UPDATE OF JOB ON PEOPLE
REFERENCING OLD AS o NEW AS n
FOR EACH ROW
MODE DB2SQL
WHEN (o.JOB != n.JOB)
     BEGIN
      DECLARE V_TEXT VARCHAR(200);
      SET V_TEXT = USER || ' OLD JOB = ' || o.JOB
                        || 'NEW JOB = ' || n.JOB;
      INSERT INTO AUDIT2 VALUES(CURRENT_TIMESTAMP, V_TEXT);
    END;
--

--after trigger
UPDATE PEOPLE
    SET JOB = 'Uni Professor'9
    WHERE PERSON_ID = 82;
--